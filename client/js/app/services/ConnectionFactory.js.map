{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","tmp","stores","version","dbName","connection","close","Erro","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","Error","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;AAAA,IAAIA,iBAAiB,GAAI,SAASC,GAAT,GAAgB;AAErC,MAAMC,MAAM,GAAG,CAAC,aAAD,CAAf;AACA,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,MAAM,GAAG,YAAf;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,KAAK,GAAG,IAAZ;AAEA;AAAA;AAAA;AAEI,mCAAc;AAAA;;AACV,cAAM,IAAIC,IAAJ,CAAS,sDAAT,CAAN;AACH;;AAJL;AAAA;AAAA,wCAO2B;AAEnB,iBAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAErC,gBAAIC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,YAAAA,WAAW,CAACI,eAAZ,GAA8B,UAAAC,CAAC,EAAI;AAE/BhB,cAAAA,iBAAiB,CAACiB,aAAlB,CAAgCD,CAAC,CAACE,MAAF,CAASC,MAAzC;AACH,aAHD;;AAKAR,YAAAA,WAAW,CAACS,SAAZ,GAAwB,UAAAJ,CAAC,EAAI;AAEzB,kBAAG,CAACX,UAAJ,EAAgB;AAEZA,gBAAAA,UAAU,GAAGW,CAAC,CAACE,MAAF,CAASC,MAAtB;AAEAb,gBAAAA,KAAK,GAAGD,UAAU,CAACC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;;AAEAA,gBAAAA,UAAU,CAACC,KAAX,GAAmB,YAAW;AAC1B,wBAAM,IAAIgB,KAAJ,CAAU,4CAAV,CAAN;AACH,iBAFD;AAGH;;AACDb,cAAAA,OAAO,CAACJ,UAAD,CAAP;AACH,aAbD;;AAeAM,YAAAA,WAAW,CAACY,OAAZ,GAAsB,UAAAP,CAAC,EAAI;AAEvBQ,cAAAA,OAAO,CAACC,GAAR,CAAYT,CAAC,CAACE,MAAF,CAASQ,KAArB;AAEAhB,cAAAA,MAAM,CAACM,CAAC,CAACE,MAAF,CAASQ,KAAT,CAAeC,IAAhB,CAAN;AACH,aALD;AAOH,WA/BM,CAAP;AAgCH;AAzCL;AAAA;AAAA,0CA2C8B;AAEtB,cAAGtB,UAAH,EAAe;AACXC,YAAAA,KAAK;AACLD,YAAAA,UAAU,GAAG,IAAb;AACH;AACJ;AAjDL;AAAA;AAAA,sCAkDyBA,UAlDzB,EAkDoC;AAE5BH,UAAAA,MAAM,CAAC0B,OAAP,CAAgB,UAAAC,KAAK,EAAI;AAErB,gBAAGxB,UAAU,CAACyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIxB,UAAU,CAAC2B,iBAAX,CAA6BH,KAA7B;AAEJxB,YAAAA,UAAU,CAAC4B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAAEK,cAAAA,aAAa,EAAG;AAAlB,aAApC;AACH,WAND;AAQH;AA5DL;;AAAA;AAAA;AAAA;AA+DH,CAvEuB,EAAxB","sourcesContent":["var ConnectionFactory = (function tmp () {\n\n    const stores = ['Negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Erro('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n\n        static getConnection() {\n\n            return new Promise( (resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n                }\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection) {\n\n                        connection = e.target.result;\n\n                        close = connection.close.bind(connection);\n\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n                    resolve(connection);\n                }\n\n                openRequest.onerror = e => {\n\n                    console.log(e.target.error);\n\n                    reject(e.target.error.name);\n                }\n\n            });\n        }\n\n        static closeConnection () {\n            \n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n        static _createStores(connection){\n\n            stores.forEach( store => {\n\n                if(connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement : true});\n            });\n\n        }\n\n    }\n})();"],"file":"ConnectionFactory.js"}