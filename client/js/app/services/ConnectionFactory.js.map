{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Erro","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","Error","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,MAAAA,M,GAAS,CAAC,aAAD,C;AACTC,MAAAA,O,GAAU,C;AACVC,MAAAA,M,GAAS,Y;AACXC,MAAAA,U,GAAa,I;AACbC,MAAAA,K,GAAQ,I;;mCAECC,iB;AAET,qCAAc;AAAA;;AACV,gBAAM,IAAIC,IAAJ,CAAS,sDAAT,CAAN;AACH;;;;0CAGsB;AAEnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAIC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,cAAAA,WAAW,CAACI,eAAZ,GAA8B,UAAAC,CAAC,EAAI;AAE/BV,gBAAAA,iBAAiB,CAACW,aAAlB,CAAgCD,CAAC,CAACE,MAAF,CAASC,MAAzC;AACH,eAHD;;AAKAR,cAAAA,WAAW,CAACS,SAAZ,GAAwB,UAAAJ,CAAC,EAAI;AAEzB,oBAAI,CAACZ,UAAL,EAAiB;AAEbA,kBAAAA,UAAU,GAAGY,CAAC,CAACE,MAAF,CAASC,MAAtB;AAEAd,kBAAAA,KAAK,GAAGD,UAAU,CAACC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,kBAAAA,UAAU,CAACC,KAAX,GAAmB,YAAY;AAC3B,0BAAM,IAAIiB,KAAJ,CAAU,4CAAV,CAAN;AACH,mBAFD;AAGH;;AACDb,gBAAAA,OAAO,CAACL,UAAD,CAAP;AACH,eAbD;;AAeAO,cAAAA,WAAW,CAACY,OAAZ,GAAsB,UAAAP,CAAC,EAAI;AAEvBQ,gBAAAA,OAAO,CAACC,GAAR,CAAYT,CAAC,CAACE,MAAF,CAASQ,KAArB;AAEAhB,gBAAAA,MAAM,CAACM,CAAC,CAACE,MAAF,CAASQ,KAAT,CAAeC,IAAhB,CAAN;AACH,eALD;AAOH,aA/BM,CAAP;AAgCH;;;4CAEwB;AAErB,gBAAIvB,UAAJ,EAAgB;AACZC,cAAAA,KAAK;AACLD,cAAAA,UAAU,GAAG,IAAb;AACH;AACJ;;;wCACoBA,U,EAAY;AAE7BH,YAAAA,MAAM,CAAC2B,OAAP,CAAe,UAAAC,KAAK,EAAI;AAEpB,kBAAIzB,UAAU,CAAC0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIzB,UAAU,CAAC4B,iBAAX,CAA6BH,KAA7B;AAEJzB,cAAAA,UAAU,CAAC6B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAChCK,gBAAAA,aAAa,EAAE;AADiB,eAApC;AAGH,aARD;AAUH","sourcesContent":["const stores = ['Negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Erro('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n\n                if (!connection) {\n\n                    connection = e.target.result;\n\n                    close = connection.close.bind(connection);\n\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    }\n                }\n                resolve(connection);\n            }\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n            }\n\n        });\n    }\n\n    static closeConnection() {\n\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, {\n                autoIncrement: true\n            });\n        });\n\n    }\n\n}"],"file":"ConnectionFactory.js"}