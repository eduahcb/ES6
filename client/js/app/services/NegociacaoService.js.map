{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_service","HttpService","get","then","result","map","objeto","Negociacao","Date","data","quantidade","valor","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodo","negociacoes","reduce","dados","concat","error","negociacao","ConnectionFactory","getConnection","connection","NegociacaoDao","dao","adiciona","erro","console","log","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":"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","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._service = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._service.get('negociacoes/semana')\n                .then(result => {\n\n                    return result.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n                })\n                .catch( () => {\n                    throw new Error('não foi possível objter negociações');\n                });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._service.get('negociacoes/semana')\n                .then(result => {\n\n                    return result.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n                })\n                .catch( () => {\n                    throw new Error('não foi possível objter negociações da semana anterior');\n                });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return this._service.get('negociacoes/semana')\n                .then(result => {\n\n                    return result.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n                })\n                .catch( () => {\n                    throw new Error('não foi possível objter negociações da semana retrasada');\n                });\n    }\n\n    obterNegociacoes () {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ])\n        .then(periodo => {\n            \n            let negociacoes = periodo.reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n        })\n        .catch(error => {\n            throw  new Error(error);\n        });\n\n    }\n\n    cadastra(negociacao){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then( dao => dao.adiciona(negociacao))\n            .then( () => 'Negociacao adicionada com sucesso')\n            .catch( (erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação') \n            });\n\n    }\n\n    lista() {\n\n        return ConnectionFactory\n        .getConnection()\n        .then( connection => new NegociacaoDao(connection))\n        .then( dao => dao.listaTodos())\n        .catch( erro => {\n            throw new Error('Não foi possível obter as negociações');\n        });\n\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n                .getConnection()\n                .then( connection => new NegociacaoDao(connection))\n                .then( dao => dao.apagaTodos())\n                .then( () => 'Negociações apagadas com sucesso')\n                .catch( erro => {\n                    throw new Error('Não foi possível apagar as negociacoes');\n                });\n    }\n\n    importa(listaAtual) {\n\n          return  this.obterNegociacoes()\n            .then( negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch( erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar negociações para importar');\n            })\n    }\n}"],"file":"NegociacaoService.js"}