{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["ConnectionFactory","Negociacao","HttpService","NegociacaoDao","NegociacaoService","_service","get","then","result","map","objeto","Date","data","quantidade","valor","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodo","negociacoes","reduce","dados","concat","error","negociacao","getConnection","connection","dao","adiciona","erro","console","log","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,iB,sBAAAA,iB;;AACAC,MAAAA,U,qBAAAA,U;;AACAC,MAAAA,W,gBAAAA,W;;AACAC,MAAAA,a,qBAAAA,a;;;mCAEKC,iB;AAET,qCAAc;AAAA;;AACV,eAAKC,QAAL,GAAgB,IAAIH,WAAJ,EAAhB;AACH;;;;qDAE0B;AAEvB,mBAAO,KAAKG,QAAL,CAAcC,GAAd,CAAkB,oBAAlB,EACEC,IADF,CACO,UAAAC,MAAM,EAAI;AAEZ,qBAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,MAAM;AAAA,uBAAI,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASD,MAAM,CAACE,IAAhB,CAAf,EAAsCF,MAAM,CAACG,UAA7C,EAAyDH,MAAM,CAACI,KAAhE,CAAJ;AAAA,eAAjB,CAAP;AACH,aAJF,WAKS,YAAM;AACV,oBAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH,aAPF,CAAP;AAQH;;;6DAEkC;AAE/B,mBAAO,KAAKV,QAAL,CAAcC,GAAd,CAAkB,oBAAlB,EACEC,IADF,CACO,UAAAC,MAAM,EAAI;AAEZ,qBAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,MAAM;AAAA,uBAAI,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASD,MAAM,CAACE,IAAhB,CAAf,EAAsCF,MAAM,CAACG,UAA7C,EAAyDH,MAAM,CAACI,KAAhE,CAAJ;AAAA,eAAjB,CAAP;AACH,aAJF,WAKS,YAAM;AACV,oBAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH,aAPF,CAAP;AAQH;;;8DAEmC;AAEhC,mBAAO,KAAKV,QAAL,CAAcC,GAAd,CAAkB,oBAAlB,EACEC,IADF,CACO,UAAAC,MAAM,EAAI;AAEZ,qBAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,MAAM;AAAA,uBAAI,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASD,MAAM,CAACE,IAAhB,CAAf,EAAsCF,MAAM,CAACG,UAA7C,EAAyDH,MAAM,CAACI,KAAhE,CAAJ;AAAA,eAAjB,CAAP;AACH,aAJF,WAKS,YAAM;AACV,oBAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACH,aAPF,CAAP;AAQH;;;6CAEmB;AAEhB,mBAAOC,OAAO,CAACC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAKNb,IALM,CAKD,UAAAc,OAAO,EAAI;AAEb,kBAAIC,WAAW,GAAGD,OAAO,CAACE,MAAR,CAAe,UAACC,KAAD,EAAQH,OAAR;AAAA,uBAAoBG,KAAK,CAACC,MAAN,CAAaJ,OAAb,CAApB;AAAA,eAAf,EAA0D,EAA1D,CAAlB;AAEA,qBAAOC,WAAP;AACH,aAVM,WAWA,UAAAI,KAAK,EAAI;AACZ,oBAAO,IAAIX,KAAJ,CAAUW,KAAV,CAAP;AACH,aAbM,CAAP;AAeH;;;mCAEQC,U,EAAW;AAEhB,mBAAO3B,iBAAiB,CACnB4B,aADE,GAEFrB,IAFE,CAEG,UAAAsB,UAAU;AAAA,qBAAI,IAAI1B,aAAJ,CAAkB0B,UAAlB,CAAJ;AAAA,aAFb,EAGFtB,IAHE,CAGI,UAAAuB,GAAG;AAAA,qBAAIA,GAAG,CAACC,QAAJ,CAAaJ,UAAb,CAAJ;AAAA,aAHP,EAIFpB,IAJE,CAII;AAAA,qBAAM,mCAAN;AAAA,aAJJ,WAKK,UAACyB,IAAD,EAAU;AACdC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,oBAAM,IAAIjB,KAAJ,CAAU,yCAAV,CAAN;AACH,aARE,CAAP;AAUH;;;kCAEO;AAEJ,mBAAOf,iBAAiB,CACvB4B,aADM,GAENrB,IAFM,CAEA,UAAAsB,UAAU;AAAA,qBAAI,IAAI1B,aAAJ,CAAkB0B,UAAlB,CAAJ;AAAA,aAFV,EAGNtB,IAHM,CAGA,UAAAuB,GAAG;AAAA,qBAAIA,GAAG,CAACK,UAAJ,EAAJ;AAAA,aAHH,WAIC,YAAM;AACV,oBAAM,IAAIpB,KAAJ,CAAU,uCAAV,CAAN;AACH,aANM,CAAP;AAQH;;;kCAEO;AAEJ,mBAAOf,iBAAiB,CACf4B,aADF,GAEErB,IAFF,CAEQ,UAAAsB,UAAU;AAAA,qBAAI,IAAI1B,aAAJ,CAAkB0B,UAAlB,CAAJ;AAAA,aAFlB,EAGEtB,IAHF,CAGQ,UAAAuB,GAAG;AAAA,qBAAIA,GAAG,CAACM,UAAJ,EAAJ;AAAA,aAHX,EAIE7B,IAJF,CAIQ;AAAA,qBAAM,kCAAN;AAAA,aAJR,WAKS,UAAAyB,IAAI,EAAI;AACZ,oBAAM,IAAIjB,KAAJ,CAAU,wCAAV,CAAN;AACH,aAPF,CAAP;AAQH;;;kCAEOsB,U,EAAY;AAEd,mBAAQ,KAAKC,gBAAL,GACL/B,IADK,CACC,UAAAe,WAAW;AAAA,qBACdA,WAAW,CAACiB,MAAZ,CAAmB,UAAAZ,UAAU;AAAA,uBACzB,CAACU,UAAU,CAACG,IAAX,CAAgB,UAAAC,mBAAmB;AAAA,yBAChCd,UAAU,CAACe,QAAX,CAAoBD,mBAApB,CADgC;AAAA,iBAAnC,CADwB;AAAA,eAA7B,CADc;AAAA,aADZ,WAME,UAAAT,IAAI,EAAI;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,oBAAM,IAAIjB,KAAJ,CAAU,mDAAV,CAAN;AACH,aATK,CAAR;AAUL","sourcesContent":["import {ConnectionFactory} from './ConnectionFactory';\nimport {Negociacao} from '../models/Negociacao';\nimport {HttpService} from './HttpService';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\n\nexport class NegociacaoService {\n\n    constructor() {\n        this._service = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._service.get('negociacoes/semana')\n                .then(result => {\n\n                    return result.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n                })\n                .catch( () => {\n                    throw new Error('não foi possível objter negociações');\n                });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._service.get('negociacoes/semana')\n                .then(result => {\n\n                    return result.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n                })\n                .catch( () => {\n                    throw new Error('não foi possível objter negociações da semana anterior');\n                });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return this._service.get('negociacoes/semana')\n                .then(result => {\n\n                    return result.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n                })\n                .catch( () => {\n                    throw new Error('não foi possível objter negociações da semana retrasada');\n                });\n    }\n\n    obterNegociacoes () {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ])\n        .then(periodo => {\n            \n            let negociacoes = periodo.reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n        })\n        .catch(error => {\n            throw  new Error(error);\n        });\n\n    }\n\n    cadastra(negociacao){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then( dao => dao.adiciona(negociacao))\n            .then( () => 'Negociacao adicionada com sucesso')\n            .catch( (erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação') \n            });\n\n    }\n\n    lista() {\n\n        return ConnectionFactory\n        .getConnection()\n        .then( connection => new NegociacaoDao(connection))\n        .then( dao => dao.listaTodos())\n        .catch( () => {\n            throw new Error('Não foi possível obter as negociações');\n        });\n\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n                .getConnection()\n                .then( connection => new NegociacaoDao(connection))\n                .then( dao => dao.apagaTodos())\n                .then( () => 'Negociações apagadas com sucesso')\n                .catch( erro => {\n                    throw new Error('Não foi possível apagar as negociacoes');\n                });\n    }\n\n    importa(listaAtual) {\n\n          return  this.obterNegociacoes()\n            .then( negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch( erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar negociações para importar');\n            })\n    }\n}"],"file":"NegociacaoService.js"}